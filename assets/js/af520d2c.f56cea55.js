"use strict";(self.webpackChunkcs102_handbook=self.webpackChunkcs102_handbook||[]).push([[6896],{3031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=t(5893),s=t(1151);const a={},o="Debugging Segmentation Faults",r={id:"debugging/segmentation-faults",title:"Debugging Segmentation Faults",description:"How to debug segmentation faults",source:"@site/docs/debugging/segmentation-faults.md",sourceDirName:"debugging",slug:"/debugging/segmentation-faults",permalink:"/cs102-handbook/docs/debugging/segmentation-faults",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"Sidebar",previous:{title:"Debugging",permalink:"/cs102-handbook/docs/category/debugging"}},l={},c=[{value:"What is a Segmentation Fault?",id:"what-is-a-segmentation-fault",level:2},{value:"Dereferencing a Null Pointer",id:"dereferencing-a-null-pointer",level:3},{value:"Indexing a Vector/Array Out-of-Bounds",id:"indexing-a-vectorarray-out-of-bounds",level:3},{value:"How to Debug Segmentation Faults",id:"how-to-debug-segmentation-faults",level:2},{value:"Using Print Statements",id:"using-print-statements",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"debugging-segmentation-faults",children:"Debugging Segmentation Faults"}),"\n",(0,i.jsx)(n.p,{children:"How to debug segmentation faults"}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-segmentation-fault",children:"What is a Segmentation Fault?"}),"\n",(0,i.jsx)(n.p,{children:"A segmentation fault is a common error that occurs when a program tries to access a memory location that it is not allowed to access. Segmentation faults are often caused by dereferencing a null pointer, or by trying to access memory that has been freed."}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of a segmentation fault:"}),"\n",(0,i.jsx)(n.h3,{id:"dereferencing-a-null-pointer",children:"Dereferencing a Null Pointer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int main() {\n    int *p = nullptr; // p is a pointer to an integer, and it is initialized to null\n\n    // This will error\n    *p = 5; // This line causes a segmentation fault because p is a null pointer\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"When we run this program, we get the following output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ./segfault\nSegmentation fault (core dumped)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The segmentation fault occurs when we try to dereference the null pointer ",(0,i.jsx)(n.code,{children:"p"}),". The program tries to access the memory location that ",(0,i.jsx)(n.code,{children:"p"})," points to, but ",(0,i.jsx)(n.code,{children:"p"})," is a null pointer, so it is not allowed to access that memory location."]}),"\n",(0,i.jsx)(n.p,{children:"Another common case is indexing a vector out-of-bounds"}),"\n",(0,i.jsx)(n.h3,{id:"indexing-a-vectorarray-out-of-bounds",children:"Indexing a Vector/Array Out-of-Bounds"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3};\n\n    // This will error\n    v[3] = 4; // This line causes a segmentation fault because v only has 3 elements\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-debug-segmentation-faults",children:"How to Debug Segmentation Faults"}),"\n",(0,i.jsx)(n.h3,{id:"using-print-statements",children:"Using Print Statements"}),"\n",(0,i.jsx)(n.p,{children:"One way to debug segmentation faults is to use print statements. Print statements allow you to print the value of variables at different points in your program. This can be useful for finding the line of code that caused the segmentation fault."}),"\n",(0,i.jsx)(n.p,{children:"Let's look at an example of a program that has a segmentation fault:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n  // create a vector of integers\n  vector<int> integers;\n\n  cout << "Adding 10 elements to the vector" << endl;\n\n  // add 10 elements to the vector\n  for (size_t i = 0; i < 10; i++) {\n    integers.push_back(i);\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  // add last element to the first\n  // This will error\n  integers[0] = integers[0] + integers[10] // This line causes a segmentation fault;\n\n  cout << "Doubled each element" << endl;\n\n  // double each element\n  for (size_t i = 0; i < 10; i++) {\n    integers[i] = integers[i] * 2;\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This line causes a segmentation fault because we are trying to access the 11th element of the vector, but the vector only has 10 elements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"integers[0] += integers[10];\n"})}),"\n",(0,i.jsx)(n.p,{children:"When we run this program, we get the following output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"\n$ ./segfault\nAdding 10 elements to the vector\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nSegmentation fault (core dumped)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice that the program crashes before it prints out the line ",(0,i.jsx)(n.code,{children:"Doubled each element"}),". This is because the program crashes when it tries to access the 11th element of the vector. To find the line of code that caused the segmentation fault, we can add print statements to the program:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'int main() {\n  // create a vector of integers\n  vector<int> integers;\n\n  cout << "Adding 10 elements to the vector" << endl;\n\n  // add 10 elements to the vector\n  for (size_t i = 0; i < 10; i++) {\n    integers.push_back(i);\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  // Highlight\n  cout << "I will print" << endl;\n\n  // add last element to the first\n  // This will error\n  integers[0] += integers[10]; // This line causes a segmentation fault;\n\n  // Highlight\n  cout << "I will not print" << endl;\n\n  cout << "Doubled each element" << endl;\n\n  // double each element\n  for (size_t i = 0; i < 10; i++) {\n    integers[i] = integers[i] * 2;\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  return 0;\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"When we run this program, we get the following output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"\n$ ./segfault\nAdding 10 elements to the vector\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nI will print\nSegmentation fault (core dumped)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Since the program crashes before it prints out the line ",(0,i.jsx)(n.code,{children:"I will not print"}),", but after it prints out the line ",(0,i.jsx)(n.code,{children:"I will print"}),", we know that the line that caused the segmentation fault is ",(0,i.jsx)(n.code,{children:"integers[0] += integers[10];"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"By this way of adding print statements to our code, we can find the line of code that caused the segmentation fault."})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var i=t(7294);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);