"use strict";(self.webpackChunkcs102_handbook=self.webpackChunkcs102_handbook||[]).push([[1722],{477:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>t});var i=r(5893),s=r(1151);const o={},c="Boiling Water Notes",l={id:"in-class-lab-notes/boiling-water-notes",title:"Boiling Water Notes",description:"New APIs",source:"@site/docs/in-class-lab-notes/boiling-water-notes.md",sourceDirName:"in-class-lab-notes",slug:"/in-class-lab-notes/boiling-water-notes",permalink:"/cs102-handbook/docs/in-class-lab-notes/boiling-water-notes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"Sidebar",previous:{title:"Bitset Notes",permalink:"/cs102-handbook/docs/in-class-lab-notes/bitset-notes"},next:{title:"Bowling Notes",permalink:"/cs102-handbook/docs/in-class-lab-notes/bowling-notes"}},a={},t=[{value:"New APIs",id:"new-apis",level:2},{value:"Command Line Arguments",id:"command-line-arguments",level:2},{value:"Parsing a CSV File into Vectors Example",id:"parsing-a-csv-file-into-vectors-example",level:2},{value:"Calculating the Boiling Point",id:"calculating-the-boiling-point",level:2},{value:"Creating a CSV Record (Optional)",id:"creating-a-csv-record-optional",level:2},{value:"Creating the CSV Record",id:"creating-the-csv-record",level:3},{value:"Accessing the CSV Record",id:"accessing-the-csv-record",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"boiling-water-notes",children:"Boiling Water Notes"}),"\n",(0,i.jsx)(n.h2,{id:"new-apis",children:"New APIs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Command line arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"argc"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"argv"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getline"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"optional third argument"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"getline(istream, buffer)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"getline(istream, buffer, delimiter)"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getline(istream, buffer, '\\n')"})," default behavior"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"getline(istream, buffer, ',')"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"stringstreams"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"istringstreams"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"vectors"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"push_back"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"size"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"[]"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"stoi"})," - string to integer"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"throws an error for invalid inputs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"command-line-arguments",children:"Command Line Arguments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'int main(int argc, char** argv) {\n  // We need to make sure to check `argc`, before we try accessing anything out of `argv`!\n  if (argc != 2) {\n    cerr << "usage: ./csv-parser filename" << endl;\n    return 1;\n  }\n\n  // This will be a segfault if we do not check `argc` first!\n  const string csvFilename = argv[1];\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"parsing-a-csv-file-into-vectors-example",children:"Parsing a CSV File into Vectors Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csv",children:"Name,Age,Occupation,Salary\nJohn,25,Engineer,55000\nJane,28,Doctor,75000\nAlex,30,Teacher,42000\nLisa,22,Student,0\nMike,35,Driver,32000\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'  ifstream fin(csvFilename);\n\n  if (!fin.is_open()) {\n    cerr << "File failed to open." << endl;\n    return 1;\n  }\n\n  // One vector for each column of the CSV\n  vector<string> personNames;\n  vector<int> personAges;\n  vector<string> personOccupations;\n  vector<int> personSalaries;\n\n  string line;\n  getline(fin, line); // Read past the first line. "Name,Age,Occupation,Salary"\n\n\n  while (getline(fin, line)) { // `line` will be "John,25,Engineer,55000"\n    string personName;\n    string personAge;\n    string personOccupation;\n    string personSalary;\n\n    istringstream recordStream(line); // `recordStream` will be "John,25,Engineer,55000"\n\n    getline(recordStream, personName, \',\'); // `personName` will be "John", `recordStream` will be "25,Engineer,55000"\n    getline(recordStream, personAge, \',\'); // `personAge` will be "25", `recordStream` will be "Engineer,55000"\n    getline(recordStream, personOccupation, \',\'); // `personOccupation` will be "Engineer", `recordStream` will be "55000"\n    getline(recordStream, personSalary, \',\'); // `personSalary` will be "55000", `recordStream` will be ""\n\n    personNames.push_back(personName); // "John"\n    personAges.push_back(stoi(personAge)); // stoi("25") -> 25\n    personOccupations.push_back(personOccupation); // "Engineer"\n    personSalaries.push_back(stoi(personSalary)); // stoi("55000") -> 55000\n  };\n\n  // We can immediately close the file after we have read all the data into vectors.\n  fin.close();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"calculating-the-boiling-point",children:"Calculating the Boiling Point"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"double elevationToBoilingPoint(const double elevation) {\n  double boilingPoint = 0.0;\n\n  // TODO Calculate the boiling point of water at the given elevation\n  //      using the equation provided in the lab description.\n\n  return boilingPoint;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Math functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"double pow(double base, double exponent);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"// natural log: ln(x)\ndouble log(double x);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-csv-record-optional",children:"Creating a CSV Record (Optional)"}),"\n",(0,i.jsxs)(n.p,{children:["With a ",(0,i.jsx)(n.code,{children:"struct"}),", you can store all of the csv fields into one vector."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct PersonRecord {\n  string name;\n  int age;\n  string occupation;\n  int salary;\n};\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"vector<PersonRecord> personRecords;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-the-csv-record",children:"Creating the CSV Record"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"PersonRecord personRecord = {\n  .name = personName,\n  .age = stoi(personAge),\n  .occupation = personOccupation,\n  .salary = stoi(personSalary),\n};\n\npersonRecords.push_back(personRecord);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"accessing-the-csv-record",children:"Accessing the CSV Record"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'PersonRecord personRecord = personRecords[0];\n/* yields:\nPersonRecord {\n  name: "John",\n  age: 25,\n  occupation: "Engineer",\n  salary: 55000,\n}\n*/\n\n// access it using\nPersonRecord personRecord = personRecords[0];\npersonRecord.name; // "John"\npersonRecord.age; // 25\npersonRecord.occupation; // "Engineer"\npersonRecord.salary; // 55000\n\n// or\npersonRecords[0].name; // "John"\npersonRecords[0].age; // 25\npersonRecords[0].occupation; // "Engineer"\npersonRecords[0].salary; // 55000\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>c});var i=r(7294);const s={},o=i.createContext(s);function c(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);